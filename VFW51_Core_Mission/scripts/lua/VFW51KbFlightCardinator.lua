-- ************************************************************************************************************
-- 
-- VFW51KbFlightCardinator: Flight card processing tool for 51st VFW workflow
--
-- Usage: VFW51KbFlightCardinator <airframe> <src_path> <tmpl_path> <dst_path> <mission> <flight> <loadout>
--                                [stpts_file] [--debug|--trace]"
--
--   <airframe>     name of airframe to build flight card for
--   <src_path>     path to src/ directory in mission directory, must include trailing path separator
--   <tmpl_path>    path to kneeboard template file to use to generate kneeboard
--   <dst_path>     path to final output file where kneeboard is saved
--   <mission>      mission field on flight card
--   <flight>       flight field on flight card
--   <loadout>      loadout field on flight card
--   [stpts_file]   file in src/kneeboards with steerpoint descriptions
--   --debug        enable debug log output
--   --trace        enable trace log output
--
-- this script fills in the standard 51st VFW flight card template based on the radio and steerpoint settings
-- and generates a .png file suitable for use as a kneeboard.
--
-- the .miz must be unpacked at the usual place (src/miz_core) prior to using this tool.
--
-- this tool is run from the lua console, it uses the VFW51WorkflowUtil library which must be in the same
-- directory as the script.
--
-- code riffs on the veaf tools, by zip.
--
-- ************************************************************************************************************

require("VFW51WorkflowUtil")

VFW51KbFlightCardinator = VFW51WorkflowUtil:new()

---------------------------------------------------------------------------------------------------------------
-- Core Methods
---------------------------------------------------------------------------------------------------------------

local mapAframeComm1 = {
    ["A-10C"] = "UHF — AN/ARC-164",
    ["F-14B"] = "UHF — AN/ARC-159",
    ["F-16C_50"] = "UHF — AN/ARC-164",
    ["FA-18C_hornet"] = "VHF/UHF — AN/ARC-219",
}

local mapAframeComm2 = {
    ["A-10C"] = "VHF (AM) — AN/ARC-186(V)",
    ["F-14B"] = "VHF/UHF — AN/ARC-182",
    ["F-16C_50"] = "VHF — AN/ARC-222",
    ["FA-18C_hornet"] = "VHF/UHF — AN/ARC-219",
}

function VFW51KbFlightCardinator:getDescription(rules, airframe)
    local desc = nil
    if type(rules) == "number" then
        desc = string.format("%.2f MHz", rules)
    elseif type(rules) == "table" then
        for _, rule in ipairs(rules) do
            local raf = string.match(rule["p"], "[^:]+", 1)
            if ((raf == "*") or (raf:lower() == airframe:lower())) and (rule["d"] ~= nil) then
                desc = rule["d"]
            end
        end
    end
    return desc
end

function VFW51KbFlightCardinator:processText(lines, airframe)
    local span = string.match(lines:lower(), "<tspan[^>]*>[^$]*($[^$]+)[^<]*</tspan>", 1)
    if span then
        local var = string.match(span, "$[^<]+"):upper()
        if string.match(var, "$COMM1_TYPE") then
            local desc = mapAframeComm1[airframe]
            if desc == nil then
                desc = "UHF"
            end
            lines = string.gsub(lines, var, desc, 1)
        elseif string.match(var, "$COMM2_TYPE") then
            local desc = mapAframeComm2[airframe]
            if desc == nil then
                desc = "VHF"
            end
            lines = string.gsub(lines, var, desc, 1)
        elseif string.match(var, "$MISSION") then
            lines = string.gsub(lines, var, self.mission)
        elseif string.match(var, "$FLIGHT") then
            lines = string.gsub(lines, var, self.flight)
        elseif string.match(var, "$LOADOUT") then
            lines = string.gsub(lines, var, self.loadout)
        elseif string.match(var, "$FOOTER") then
            lines = string.gsub(lines, var, self.mission .. " — autogenerated on " .. os.date())
        elseif string.match(var, "$RADIO_") then
            local desc = self:getDescription(RadioPresetsBlue[var], airframe)
            if desc ~= nil then
                lines = string.gsub(lines, var, desc, 1)
            else
                lines = string.gsub(lines, var, "Unassigned", 1)
                lines = string.gsub(lines, "fill=\"#FFFFFF\"", "fill=\"#9B9B9B\"", 1)
            end
        elseif string.match(var, "$STEER_") and SteerpointDesc then
            local num = math.floor(string.match(var, "^$STEER_(%d+)"))
            if SteerpointDesc[num] then
                lines = string.gsub(lines, var, SteerpointDesc[num], 1)
            else
                lines = string.gsub(lines, var, "Unassigned", 1)
                lines = string.gsub(lines, "fill=\"#FFFFFF\"", "fill=\"#9B9B9B\"", 1)
            end
        end
    end
    lines = string.gsub(lines, "$AIRFRAME", airframe, 1)
    return lines
end

function VFW51KbFlightCardinator:build()
    local stptDescPath = self:loadLuaFile(self.srcPath, "kneeboards", self.stptsFile)
    if stptDescPath then
        self:logInfo(string.format("Using steerpoint descriptions [%s]", stptDescPath))
    end
    local settingsPath = self:loadLuaFile(self.srcPath, "radio", "vfw51_radio_settings.lua")
    if settingsPath then
        self:logInfo(string.format("Using radio settings [%s]", settingsPath))

        -- process the template
        local tmplSubPath = self.dstPath .. ".svg"
        local inFile = io.open(self.tmplPath, "r")
        local outFile = io.open(tmplSubPath, "w")
        assert(inFile and outFile)

        local lines
        repeat
            lines = inFile:read()
            if lines then
                while string.find(lines:lower(), "<text[^>]*") and not string.find(lines:lower(), "</text>") do
                    local nextLine = inFile:read()
                    if not nextLine then
                        break
                    end
                    lines = lines .. "\n" .. nextLine
                end
                if string.find(lines:lower(), "<text[^>]*") and string.find(lines:lower(), "</text>") then
                    lines = self:processText(lines, self.airframe)
                end
                outFile:write(lines .. "\n")
            end
        until (not lines)

        inFile:close()
        outFile:close()

        -- convert the template to a .png
        os.execute(string.format("magick %s %s >nul 2>&1", tmplSubPath, self.dstPath))
        os.remove(tmplSubPath)
    else
    end
end

---------------------------------------------------------------------------------------------------------------
-- Main
---------------------------------------------------------------------------------------------------------------

function VFW51KbFlightCardinator:new(o, arg)
    o = o or VFW51WorkflowUtil:new(o, arg)
    setmetatable(o, self)
    self.__index = self

    self.id = "Fcardinator"
    self.version = "1.0.0"

    local isArgBad = false
    for _, val in ipairs(arg) do
        if self.airframe == nil then
            self.airframe = val
        elseif self.srcPath == nil then
            self.srcPath = self:canonicalizeDirPath(val)
        elseif self.tmplPath == nil then
            self.tmplPath = self:canonicalizeFilePath(val)
        elseif self.dstPath == nil then
            self.dstPath = self:canonicalizeFilePath(val)
        elseif self.mission == nil then
            self.mission = val
        elseif self.flight == nil then
            self.flight = val
        elseif self.loadout == nil then
            self.loadout = val
        elseif self.stptsFile == nil then
            self.stptsFile = val
        elseif (val:lower() ~= "--debug") and (val:lower() ~= "--trace") then
            isArgBad = true
        end
    end
    if isArgBad or not self.srcPath or not self.dstPath then
        print("Usage: VFW51KbFlightCardinator <airframe> <src_path> <tmpl_path> <dst_path> <mission>")
        print("                               <flight> <loadout> [stpts_file] [--debug|--trace]")
        return nil
    end
    if self.mission == nil then
        self.mission = "Untitled"
    end
    if self.flight == nil then
        self.flight = "Unknown"
    end
    if self.loadout == nil then
        self.loadout = "Unknown"
    end

    return o
 end

---------------------------------------------------------------------------------------------------------------
-- Main
---------------------------------------------------------------------------------------------------------------

local inator = VFW51KbFlightCardinator:new(nil, arg)
if inator then
    inator:build()
end